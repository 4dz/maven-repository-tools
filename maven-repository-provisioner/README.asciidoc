simpligility technologies inc. presents 

= Maven Repository Provisioner

== Introduction

A command line tool and library from
https://github.com/simpligility/maven-repository-tools[the Maven
Repository Tools project] to provision a component and all its transitive
dependencies from a source Maven repository to a target Maven
repository.

== Use Cases

* Provision a repository to contain only "approved" components
* Create a repository that contains a product and all its dependencies
  for archival, software escrow, auditing or similar compliance
  related reasons
* Transfer components and all needed dependencies between repositories
  or repository managers without using migration tools

== Features

* Command line tool with built-in help
* Resolves specified component including transitive dependencies and parent
  pom's required
* All coordinates can be used to specify component - groupId,
  artifactId, version, classifier, packaging/extension
* Allows processing of multiple components in one run
* Includes javadoc and sources jars to included 
* Source repository defaults to the Central Repository, but can be
  configured 
* Target repository can be a file location or a repository manager repository
* Authentication for repository manager deployment can be configured
* Temporary cache directory on local disk for inspection `local-cache`
* Logging to stdout as well as log file
  `maven-repository-provisioner.log`

== Download

Get the `*-jar-with-dependencies.jar` of the latest version available from
http://repo1.maven.org/maven2/com/simpligility/maven/maven-repository-provisioner/

== Usage

Java 7 or higher is required.

The command 

----
java -jar maven-repository-provisioner-*-jar-with-dependencies.jar 
----

shows the documentation. A full example invocation
could look like this:

----
java - jar maven-repository-provisioner-*-jar-with-dependencies.jar 
     -a "com.simpligility.maven:progressive-organization-pom:pom:2.3.0"
     -t "http://localhost:8081/nexus/content/repositories/test"
     -u admin
     -p admin123
     -s "http://localhost:8081/nexus/content/groups/public/"
----

See the +test.sh+ script for a number of further examples.

If you need to access the source repository via a proxy server, you can configure the standard Java
proxy parameters:

----
http.proxyHost
http.proxyPort
http.proxyUser
http.proxyPassword
----

Find more information about these properties in the https://docs.oracle.com/javase/8/docs/api/java/net/doc-files/net-properties.html[Java documentation].